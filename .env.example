# ============================================
# TransformAR - Configuración de Entorno
# ============================================

# === Ollama (Motor de IA para procesamiento NLP) ===
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=qwen2.5vl:3b
OLLAMA_TEMPERATURE=0
OLLAMA_MAX_TOKENS=2048
OLLAMA_INPUT_LIMIT=12000

# === Docling (OCR y extracción de texto de documentos) ===
DOCLING_DO_OCR=True
DOCLING_FORCE_FULL_PAGE_OCR=True
DOCLING_OCR_LANGS=auto

# === Autenticación JWT ===
JWT_SECRET_KEY=your-secret-key-change-in-production-use-long-random-string
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# === Firebase (Base de datos y autenticación) ===
# Ruta al archivo JSON de credenciales de Firebase
FIREBASE_CREDENTIALS_PATH=firebase-credentials.json

# === SMTP (Para recuperación de contraseña) ===
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-specific-password
FROM_EMAIL=your-email@gmail.com
FRONTEND_URL=http://localhost:3000

# === Gmail OAuth (Para integraciones por usuario) ===
# Para obtener credenciales:
# 1. Ve a: https://console.cloud.google.com
# 2. Crea un proyecto nuevo
# 3. Habilita Gmail API
# 4. Crea credenciales OAuth 2.0
# 5. Descarga el JSON y guárdalo como input/credentials.json

# URL de redirección OAuth de Gmail (debe coincidir con Google Cloud Console)
GMAIL_REDIRECT_URI=http://localhost:8000/integrations/gmail/callback

# === Outlook OAuth (Para integraciones por usuario) ===
# Obtener desde: https://portal.azure.com (Azure Active Directory > App registrations)
OUTLOOK_CLIENT_ID=your-outlook-client-id-from-azure
OUTLOOK_CLIENT_SECRET=your-outlook-client-secret-from-azure
OUTLOOK_REDIRECT_URI=http://localhost:8000/integrations/outlook/callback

# === WhatsApp Business API (Por usuario - almacenado en Firestore) ===
# NOTA: Cada usuario conecta su propia cuenta de WhatsApp Business
# usando el endpoint POST /integrations/whatsapp/connect
# Las credenciales se guardan en Firestore en la colección external_credentials
#
# Para que los webhooks funcionen, configura:
WHATSAPP_WEBHOOK_TOKEN=your_random_webhook_verification_token_xyz123

# === Telegram Bot API (Por usuario - almacenado en Firestore) ===
# NOTA: Cada usuario conecta su propio bot de Telegram
# usando el endpoint POST /integrations/telegram/connect
# Las credenciales se guardan en Firestore en la colección external_credentials
#
# No se requieren variables globales adicionales

# === Procesamiento de texto (Configuración avanzada) ===
# Activar limpieza automática de texto con LLM (0=desactivado, 1=activado)
AUTO_TEXT_LLM=1

# Máximo de caracteres para procesamiento de limpieza
AUTO_TEXT_MAXCHARS=800

# Convertir fechas a formato ISO automáticamente (0=no, 1=sí)
AUTO_ISO_DATES_DEFAULT=0

# ============================================
# INSTRUCCIONES DE CONFIGURACIÓN
# ============================================

# === Gmail ===
# Para Gmail, necesitas crear un archivo 'input/credentials.json'
# 1. Ve a: https://console.cloud.google.com
# 2. Crea un proyecto nuevo
# 3. Habilita Gmail API
# 4. Crea credenciales OAuth 2.0
# 5. Descarga el JSON y guárdalo como input/credentials.json

# === WhatsApp Setup ===
# Guía completa:
# 1. Registrarse en https://business.facebook.com
# 2. Crear workspace
# 3. Agregar aplicación WhatsApp
# 4. Configurar webhook:
#    - Callback URL: https://tu-dominio.com/webhook/whatsapp
#    - Verify Token: el valor de WHATSAPP_WEBHOOK_TOKEN
# 5. Obtener Phone Number ID y Access Token desde el dashboard
# 6. Para producción, obtener token permanente usando Graph API

# === Telegram Setup ===
# Guía rápida:
# 1. Abrir Telegram
# 2. Buscar @BotFather
# 3. Enviar /newbot
# 4. Elegir nombre y username
# 5. Copiar el token en TELEGRAM_BOT_TOKEN
# 6. (Opcional) Configurar webhook con:
#    POST https://api.telegram.org/bot<TOKEN>/setWebhook
#    Body: {"url": "https://tu-dominio.com/webhook/telegram"}

# === Notas de Seguridad ===
# - NUNCA subas este archivo con valores reales a repositorios públicos
# - Usa variables de entorno en producción (Heroku, AWS, Docker, etc.)
# - Rota los tokens regularmente
# - Usa HTTPS obligatorio para webhooks
# - Implementa rate limiting en producción
